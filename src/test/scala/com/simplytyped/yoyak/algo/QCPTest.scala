package com.simplytyped.yoyak.algo

import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers
import com.simplytyped.yoyak.domain.{PAssign, CNF}

/**
 * Created with IntelliJ IDEA.
 * User: ihji
 * Date: 5/14/12
 * Time: 3:32 AM
 * To change this template use File | Settings | File Templates.
 */

class QCPTest extends FunSuite with ShouldMatchers {
  test("simple QCP") {
    import com.simplytyped.yoyak.domain.CNFConversions._
    import com.simplytyped.yoyak.domain.PAssign.str2PAssign
    val solution : PAssign = "110"
    val cnf : CNF =
      """p cnf 3 4
        |1 0
        |1 2 0
        |-1 2 3 0
        |-3 0
      """.stripMargin
    val qcp = new QCP(cnf)
    val cnf$ = qcp.run(List(PAssign.empty))
    cnf$.get should be (solution)
  }
  test("yet another simple QCP") {
    import com.simplytyped.yoyak.domain.CNFConversions._
    import com.simplytyped.yoyak.domain.PAssign.str2PAssign
    val solution : PAssign = "00101111011101001101111111001011100011111111110000"
    val cnf : CNF =
      """c instance by G3 (http://www.is.titech.ac.jp/~watanabe/gensat/a1/index.html)
        |c solution = 00101111011101001101111111001011100011111111110000
        |p cnf 50 230
        |-21 20 -35 0
        |-36 43 -22 0
        |-13 -11 -5 0
        |-16 -4 -7 0
        |6 -39 47 0
        |-33 3 1 0
        |-12 31 7 0
        |2 -36 48 0
        |-14 19 44 0
        |22 1 36 0
        |-49 -23 4 0
        |-10 26 -18 0
        |44 -3 50 0
        |-6 29 31 0
        |24 2 -38 0
        |47 23 -26 0
        |-24 32 43 0
        |11 -22 -31 0
        |-31 7 34 0
        |5 33 37 0
        |3 -10 -29 0
        |-48 -45 -3 0
        |-5 46 -45 0
        |33 -1 15 0
        |16 -9 32 0
        |-7 -14 39 0
        |44 -12 -28 0
        |-22 -2 -37 0
        |-25 -22 20 0
        |38 -5 40 0
        |4 -22 25 0
        |17 -8 -10 0
        |34 -50 -33 0
        |-16 47 34 0
        |-13 23 6 0
        |48 49 -15 0
        |13 50 10 0
        |-48 -41 -46 0
        |-32 13 12 0
        |33 24 -15 0
        |40 -33 32 0
        |-21 38 -41 0
        |24 7 27 0
        |16 -35 -33 0
        |19 15 -4 0
        |32 -7 50 0
        |21 -36 4 0
        |48 -28 -44 0
        |42 -8 2 0
        |-10 26 -3 0
        |-50 48 28 0
        |-2 -35 -37 0
        |14 -16 15 0
        |-32 -7 23 0
        |5 -3 33 0
        |24 -11 10 0
        |12 -34 3 0
        |-23 41 -14 0
        |-49 34 15 0
        |-17 -31 3 0
        |13 22 4 0
        |19 40 27 0
        |8 -32 -39 0
        |-30 48 12 0
        |25 -30 -40 0
        |-30 -16 31 0
        |20 -2 27 0
        |6 37 50 0
        |-23 45 20 0
        |17 50 9 0
        |-26 -30 -12 0
        |-15 27 -4 0
        |18 -48 -44 0
        |9 -26 37 0
        |1 37 11 0
        |-21 8 36 0
        |12 -4 -41 0
        |8 -3 -29 0
        |-5 30 32 0
        |7 16 -6 0
        |29 37 -17 0
        |-5 -1 2 0
        |40 -15 -3 0
        |-12 35 11 0
        |-26 49 45 0
        |-1 -31 -3 0
        |-31 -4 -3 0
        |24 2 -44 0
        |-39 43 25 0
        |-13 -37 -7 0
        |-45 -19 -14 0
        |49 -29 25 0
        |-25 19 -16 0
        |-13 -35 -9 0
        |4 41 -9 0
        |-15 13 -24 0
        |-13 10 -20 0
        |49 23 46 0
        |29 -41 -38 0
        |-8 -9 -3 0
        |36 33 -20 0
        |9 -4 38 0
        |16 -22 12 0
        |-30 -28 36 0
        |16 43 -39 0
        |40 16 17 0
        |-34 2 -17 0
        |50 -36 12 0
        |20 31 47 0
        |-13 17 38 0
        |-22 -48 19 0
        |-34 -32 -45 0
        |39 33 15 0
        |24 -8 33 0
        |24 -3 -21 0
        |27 1 32 0
        |-44 -6 29 0
        |-25 -50 -5 0
        |5 28 1 0
        |-37 34 22 0
        |34 -10 -19 0
        |7 -22 -34 0
        |15 -21 -47 0
        |-32 -11 42 0
        |33 -46 -48 0
        |43 -29 -9 0
        |-10 25 -50 0
        |-29 -1 -35 0
        |-18 43 23 0
        |-28 -25 14 0
        |-29 -50 -5 0
        |-2 29 -32 0
        |-42 -8 14 0
        |-37 -43 40 0
        |-8 -4 -11 0
        |29 -40 9 0
        |35 7 33 0
        |-1 10 18 0
        |-41 25 -49 0
        |36 18 -38 0
        |24 -41 26 0
        |7 4 49 0
        |11 -36 2 0
        |21 32 28 0
        |-35 7 31 0
        |6 13 36 0
        |-20 -15 -25 0
        |-11 16 37 0
        |-13 34 47 0
        |19 46 -47 0
        |4 20 -41 0
        |21 -6 48 0
        |-6 -37 41 0
        |9 -26 23 0
        |43 9 50 0
        |41 17 -16 0
        |21 23 -20 0
        |-18 -49 -24 0
        |-50 46 25 0
        |-14 -9 47 0
        |-28 45 6 0
        |-32 -7 38 0
        |-38 -36 10 0
        |37 46 15 0
        |39 16 -43 0
        |45 44 -15 0
        |-14 19 10 0
        |24 23 39 0
        |-21 -7 -36 0
        |-6 -50 15 0
        |-30 -36 -26 0
        |-30 13 -28 0
        |22 8 28 0
        |43 49 12 0
        |31 4 -44 0
        |-47 46 -38 0
        |-13 -1 -17 0
        |26 9 -29 0
        |18 2 -20 0
        |-17 -40 -2 0
        |-32 -17 11 0
        |-27 -31 47 0
        |1 -28 40 0
        |-31 42 -3 0
        |-6 -12 25 0
        |21 30 14 0
        |-42 40 3 0
        |25 -23 41 0
        |-45 42 10 0
        |-29 40 -8 0
        |-50 37 -46 0
        |-44 46 30 0
        |-47 -20 -35 0
        |44 -24 48 0
        |-41 16 45 0
        |1 13 14 0
        |11 31 34 0
        |-33 -8 45 0
        |-38 6 13 0
        |48 -22 -30 0
        |33 -12 7 0
        |32 -29 -25 0
        |-2 -43 -36 0
        |32 38 -36 0
        |35 -4 -45 0
        |-18 -12 -47 0
        |-44 -31 33 0
        |19 -45 -4 0
        |-31 28 -35 0
        |-48 -14 43 0
        |23 16 41 0
        |-2 3 -4 0
        |-23 33 -31 0
        |-22 2 26 0
        |-45 -16 -36 0
        |-27 -2 7 0
        |-29 -45 -28 0
        |-3 -37 -47 0
        |-33 -27 1 0
        |-24 -33 21 0
        |-29 -46 -16 0
        |50 -13 17 0
        |-2 -4 -31 0
        |-13 -37 28 0
        |14 15 -29 0
        |-27 -38 -3 0
        |-20 -40 23 0
        |-39 -1 26 0
        |50 5 -18 0
        |-7 27 31 0
      """.stripMargin
    val qcp = new QCP(cnf)
    val cnf$ = qcp.run(List(PAssign.empty))
    cnf$.get should be (solution)
  }
}
